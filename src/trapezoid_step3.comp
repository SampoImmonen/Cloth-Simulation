#version 430

layout( local_size_x = 10, local_size_y = 10 ) in;

uniform float DeltaT = 0.00002;

layout(std430, binding=0) buffer PosIn {
  vec4 PositionIn[];
};

layout(std430, binding=2) buffer VelIn1 {
  vec4 VelocityIn1[];
};

layout(std430, binding=3) buffer VelIn2 {
  vec4 VelocityIn2[];
};

layout(std430, binding=5) buffer kBuf1 {
  vec4 kBuffer1[];
};

layout(std430, binding=6) buffer kBuf2 {
  vec4 kBuffer2[];
};



void main(){
  
  uvec3 nParticles = gl_NumWorkGroups * gl_WorkGroupSize;
  uint idx = gl_GlobalInvocationID.y * nParticles.x + gl_GlobalInvocationID.x;

  vec3 p = vec3(PositionIn[idx]);
  vec3 v1 = vec3(VelocityIn1[idx]);
  vec3 v2 = vec3(VelocityIn2[idx]);
  vec3 a1 = vec3(kBuffer1[idx]);
  vec3 a2 = vec3(kBuffer2[idx]);

  PositionIn[idx] = vec4(p+(v1+v2)/2*DeltaT, 1.0);
  VelocityIn1[idx] = vec4(v1+(a1+a2)/2*DeltaT, 0.0);

  if( gl_GlobalInvocationID.y == nParticles.y - 1 && 
      (gl_GlobalInvocationID.x == 0 || 
       gl_GlobalInvocationID.x == nParticles.x / 4 ||
       gl_GlobalInvocationID.x == nParticles.x * 2 / 4 ||
       gl_GlobalInvocationID.x == nParticles.x * 3 / 4 ||
       gl_GlobalInvocationID.x == nParticles.x - 1)) {
    PositionIn[idx] = vec4(p,1.0);
    VelocityIn1[idx] = vec4(0,0,0,0);
  }
}