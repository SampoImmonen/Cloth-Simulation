#version 430

layout( local_size_x = 10, local_size_y = 10 ) in;

uniform vec3 Gravity = vec3(0,-10,0);
uniform float ParticleMass = 0.1;
uniform float ParticleInvMass = 1.0 / 0.1;
uniform float SpringK = 500.0;
uniform float RestLengthHoriz;
uniform float RestLengthVert;
uniform float RestLengthDiag;
uniform float DeltaT = 0.00002;
uniform float DampingConst = 0.1;
uniform bool hasWind;
uniform bool hasFlex;
uniform bool hasShear;

layout(std430, binding=1) buffer PosIn {
  vec4 PositionIn[];
};

layout(std430, binding=3) buffer VelIn {
  vec4 VelocityIn[];
};

layout(std430, binding=6) buffer kBuf2 {
  vec4 kBuffer2[];
};

vec3 CalculateForces(vec3 p, vec3 v, uvec3 nParticles, uint idx){
  //calculate forces to kBuf1 from state

  // Start with gravitational acceleration and add the spring
  // forces from each neighbor
  vec3 force = Gravity * ParticleMass;
  vec3 r;
  // Particle above
  if( gl_GlobalInvocationID.y < nParticles.y - 1 ) {
    r = PositionIn[idx + nParticles.x].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthVert);
  } 
  // Below
  if( gl_GlobalInvocationID.y > 0 ) {
    r = PositionIn[idx - nParticles.x].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthVert);
  } 
  // Left
  if( gl_GlobalInvocationID.x > 0 ) {
    r = PositionIn[idx-1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
  } 
  // Right
  if( gl_GlobalInvocationID.x < nParticles.x - 1 ) {
    r = PositionIn[idx + 1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthHoriz);
  }

  if (hasShear){
  // Diagonals
  // Upper-left
  if( gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.y < nParticles.y - 1 ) {
    r = PositionIn[idx + nParticles.x - 1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
  }
  // Upper-right
  if( gl_GlobalInvocationID.x < nParticles.x - 1 && gl_GlobalInvocationID.y < nParticles.y - 1) {
    r = PositionIn[idx + nParticles.x + 1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
  }
  // lower -left
  if( gl_GlobalInvocationID.x > 0 && gl_GlobalInvocationID.y > 0 ) {
    r = PositionIn[idx - nParticles.x - 1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
  }
  // lower-right
  if( gl_GlobalInvocationID.x < nParticles.x - 1 && gl_GlobalInvocationID.y > 0 ) {
    r = PositionIn[idx - nParticles.x + 1].xyz - p;
    force += normalize(r) * SpringK * (length(r) - RestLengthDiag);
  }
  }

  if (hasFlex){
  //flex springs
  //above
  if( gl_GlobalInvocationID.y < nParticles.y - 2 ) {
    r = PositionIn[idx + 2*nParticles.x].xyz - p;
    force += normalize(r) * SpringK * (length(r) - 2.0f*RestLengthVert);
  } 

  //below
  if( gl_GlobalInvocationID.y > 1) {
    r = PositionIn[idx - 2*nParticles.x].xyz - p;
    force += normalize(r) * SpringK * (length(r) - 2.0f*RestLengthVert);
  } 

  //right
  if( gl_GlobalInvocationID.x < nParticles.x - 2 ) {
    r = PositionIn[idx + 2].xyz - p;
    force += normalize(r) * SpringK * (length(r) - 2.0f*RestLengthHoriz);
  }

  //left
  if( gl_GlobalInvocationID.x > 1 ) {
    r = PositionIn[idx - 2].xyz - p;
    force += normalize(r) * SpringK * (length(r) - 2.0f*RestLengthHoriz);
  }
  }

  force += -DampingConst * v;
  if (hasWind){
      force+=vec3(0,0,5);
  }
  // Apply simple Euler integrator
  vec3 a = force * ParticleInvMass;
  return a;
}

void main(){
  
  uvec3 nParticles = gl_NumWorkGroups * gl_WorkGroupSize;
  uint idx = gl_GlobalInvocationID.y * nParticles.x + gl_GlobalInvocationID.x;

  vec3 p = vec3(PositionIn[idx]);
  vec3 v = vec3(VelocityIn[idx]);

  vec3 a = CalculateForces(p, v, nParticles, idx);
  kBuffer2[idx] = vec4(a, 0.0);
}